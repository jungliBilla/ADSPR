import java.util.Scanner;

class SocialNetworkGraph {
    static class DOB {
        int day, month, year;
        DOB(int day, int month, int year) {
            this.day = day;
            this.month = month;
            this.year = year;
        }
    }

    static class Node {
        Link friends;
        String name;
        int comments;
        DOB dob;

        Node(String name, int comments, DOB dob) {
            this.name = name;
            this.comments = comments;
            this.dob = dob;
            this.friends = null;
        }
    }

    static class Link {
        Node friend;
        Link next;

        Link(Node friend) {
            this.friend = friend;
            this.next = null;
        }
    }

    private Node head = null;

    void create() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter number of people: ");
        int n = scanner.nextInt();
        
        for (int i = 0; i < n; i++) {
            System.out.println("Enter details of person " + (i + 1));
            System.out.print("Name: ");
            String name = scanner.next();
            System.out.print("Date of birth (day month year): ");
            int day = scanner.nextInt();
            int month = scanner.nextInt();
            int year = scanner.nextInt();
            System.out.print("Number of comments: ");
            int comments = scanner.nextInt();
            
            DOB dob = new DOB(day, month, year);
            Node newNode = new Node(name, comments, dob);
            
            if (head == null) {
                head = newNode;
            } else {
                Node temp = head;
                while (temp.friends != null) {
                    temp = temp.friends.friend;
                }
                temp.friends = new Link(newNode);
            }
        }
    }

    void display() {
        Node current = head;
        while (current != null) {
            System.out.print("Name: " + current.name + ", DOB: " + current.dob.day + "/" + current.dob.month + "/" + current.dob.year + ", Comments: " + current.comments + ", Friends: ");
            Link friendLink = current.friends;
            while (friendLink != null) {
                System.out.print(friendLink.friend.name + " ");
                friendLink = friendLink.next;
            }
            System.out.println();
            current = current.friends != null ? current.friends.friend : null;
        }
    }

    void birthdays() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the current month (1-12): ");
        int currentMonth = scanner.nextInt();
        boolean found = false;
        Node current = head;
        while (current != null) {
            if (current.dob.month == currentMonth) {
                System.out.println("Birthday: " + current.name + " on " + current.dob.day + "/" + current.dob.month + "/" + current.dob.year);
                found = true;
            }
            current = current.friends != null ? current.friends.friend : null;
        }
        if (!found) {
            System.out.println("No birthdays in this month!");
        }
    }

    public static void main(String[] args) {
        SocialNetworkGraph graph = new SocialNetworkGraph();
        Scanner scanner = new Scanner(System.in);
        int choice;
        do {
            System.out.print("1. Create\n2. Display\n3. Birthdays\n4. Exit\nEnter your choice: ");
            choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    graph.create();
                    break;
                case 2:
                    graph.display();
                    break;
                case 3:
                    graph.birthdays();
                    break;
            }
        } while (choice != 4);
    }
}
